Script started on Fri 22 Feb 2013 09:42:49 AM CST
$ cat -n ola3.cc
     1	//*******************************************************************************************************
     2	//*******************************************************************************************************
     3	//Name:       Ben Belden
     4	//Class ID#:  c1004202
     5	//Section:    CSCI 2170-001
     6	//Assignment: Open Lab Assignment #3
     7	//Due:        24:00, March 4, 2013
     8	//Purpose:    The purpose of this program is to take a given set of number and, starting from index 0,
     9	//            find your way to the index that contains the 0. However, you may only move to the left or
    10	//            right the number of indexes shown in the index that you're on. 
    11	//            Solved using recursive function calls and a frequency array attached to the puzzle array
    12	//            as a second row. The frequency array is used to mark indexes that have already been used.
    13	//Input:      From pre-formatted data file.
    14	//Output:     Print to terminal.
    15	
    16	#include <iostream>		//for cin/cout
    17	#include <string>		//for string data type
    18	#include <fstream>		//for file stream data type
    19	
    20	using namespace std;
    21	
    22	//function prototype
    23	void solve (int, int, int, int puzzle[][2]);	
    24	
    25	//main function
    26	int main ()
    27	{
    28		//declaration of local variables
    29		ifstream myFile;			//input file stream from pre-determined input file
    30		int size;					//used to hold the value of the size of the puzzle
    31		int start;					//used to hold the index number from which movement occurs
    32		int number;					//used as a puzzle number counter
    33		int puzzle [20][2];			//puzzle array with attached frequency array 
    34		
    35		//prints user introduction
    36		cout << "\nHello!\nThe purpose of this program is to take a given set of numbers\n";
    37		cout << "and, starting from index 0, find your way to the index that\n";
    38		cout << "contains the 0. However, you may only move to the left or right\n";
    39		cout << "the number of indexes shown in the index that you're on.\n";
    40		cout << "Good luck!\n";
    41		
    42		myFile.open("puzzle.txt"); 	//open pre-formatted, given file
    43		
    44		//priming read and puzzle counter initialization
    45		myFile >> size >> start;					
    46		number = 1;					
    47		
    48		//EOF loop
    49		while (myFile)
    50		{
    51			//reads in puzzle array
    52			for (int i = 0; i < size; i++)
    53				myFile >> puzzle[i][0];
    54			
    55			//initializes frequency array
    56			for (int i = 0; i < size; i++)
    57				puzzle[i][1] = 0;
    58	
    59			//prints puzzle indexes and puzzle data
    60			cout << "\nPuzzle " << number << "\nIndex:  "; 
    61			for (int i = 0; i < size; i++)
    62				cout << i << "\t";
    63			cout << "\nPuzzle: ";
    64			for (int i = 0; i < size; i++)
    65				cout << puzzle[i][0] << "\t";
    66			cout << endl << endl << "Start at index 0\n";
    67			
    68			solve (size, start, number, puzzle);		//function call
    69			
    70			//get next puzzle size and start numbers and increment puzzle counter
    71			myFile >> size >> start;
    72			number++;				
    73		}
    74		
    75		myFile.close ();			//close file
    76		
    77		return 0;
    78		
    79	}
    80	
    81	
    82	//function definition
    83	//*******************************************************************************************************
    84	//Function: solve
    85	//Purpose: 
    86	//Precondition: 
    87	//Postcondition: Returns to calling function when 
    88	
    89	void solve (int size, int start, int number, int puzzle[][2])
    90	{	
    91		//tests for the goal (0) at index: start
    92		if (puzzle[start][0] == 0)
    93		{
    94			cout <<  "YOU'VE SOLVED PUZZLE " << number << "!\n\n";
    95			return;					//passes control back to calling function
    96		}
    97		
    98		//uses the frequency array to test for whether the the index at puzzle[start][] has been used
    99		if (puzzle[start][1] > 0)
   100		{
   101			cout << "Puzzle " << number << " cannot be not solved!\n\n";
   102			return;					//passes control back to calling function
   103		}
   104		//tests for ....
   105		if (start - puzzle[start][0] >=0 && start - puzzle[start][0] < size)
   106		{
   107			cout << "Move " << puzzle[start][0] << " places to the left to index ";
   108			cout << start - puzzle[start][0] << endl;					//prints path
   109			puzzle[start][1]++;											//increment frequency counter
   110			solve(size, start - puzzle[start][0], number, puzzle);		//recursive function call
   111			return;											//passes control back to calling function
   112		}
   113		
   114		//tests for ....
   115		if (start + puzzle[start][0] >= 0 && start + puzzle[start][0] < size)
   116		{
   117			cout << "Move " << puzzle[start][0] << " places to the right to index ";
   118			cout << start + puzzle[start][0] << endl;					//prints path
   119			puzzle[start][1]++;											//increment frequency counter
   120			solve(size, start + puzzle[start][0], number, puzzle);		//recursive function call
   121			return;											//passes control back to calling function
   122		}
   123		
   124		
   125		return;						//passes control back to calling function
   126	}
   127	//*******************************************************************************************************
   128	//*******************************************************************************************************
$ ola3

Hello!
The purpose of this program is to take a given set of numbers
and, starting from index 0, find your way to the index that
contains the 0. However, you may only move to the left or right
the number of indexes shown in the index that you're on.
Good luck!

Puzzle 1
Index:  0	1	2	3	4	5	6	7	8	9	
Puzzle: 3	6	4	1	3	4	2	5	3	0	

Start at index 0
Move 3 places to the right to index 3
Move 1 places to the left to index 2
Move 4 places to the right to index 6
Move 2 places to the left to index 4
Move 3 places to the left to index 1
Move 6 places to the right to index 7
Move 5 places to the left to index 2
Puzzle 1 cannot be not solved!


Puzzle 2
Index:  0	1	2	3	4	
Puzzle: 3	1	2	3	0	

Start at index 0
Move 3 places to the right to index 3
Move 3 places to the left to index 0
Puzzle 2 cannot be not solved!


Puzzle 3
Index:  
Puzzle: 

Start at index 0
Puzzle 3 cannot be not solved!

$ exit
exit

Script done on Fri 22 Feb 2013 09:43:01 AM CST
